import React, { useState } from 'react';
import { Search, Filter, Calendar, Tag } from 'lucide-react';

const Exploits: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');

  const exploits = [
    {
      id: '1',
      title: 'Reentrancy Attack on Yield Protocol',
      category: 'Smart Contract',
      subcategory: 'Reentrancy',
      severity: 'Critical',
      date: '2024-01-15',
      protocols: ['Uniswap', 'Compound'],
      financialImpact: '$2.1M',
      description: 'Attacker exploited reentrancy vulnerability in yield farming contract to drain liquidity pool.',
      tags: ['reentrancy', 'yield-farming', 'liquidity-pool']
    },
    {
      id: '2',
      title: 'Oracle Price Manipulation via Flash Loans',
      category: 'Economic',
      subcategory: 'Oracle Manipulation',
      severity: 'High',
      date: '2024-01-12',
      protocols: ['Chainlink', 'Aave'],
      financialImpact: '$1.8M',
      description: 'Flash loan attack manipulated oracle prices to liquidate undercollateralized positions.',
      tags: ['oracle', 'flash-loan', 'liquidation']
    },
    {
      id: '3',
      title: 'Access Control Bypass in Governance Contract',
      category: 'Smart Contract',
      subcategory: 'Access Control',
      severity: 'High',
      date: '2024-01-10',
      protocols: ['MakerDAO'],
      financialImpact: '$500K',
      description: 'Improper access controls allowed unauthorized modification of governance parameters.',
      tags: ['governance', 'access-control', 'parameters']
    },
    {
      id: '4',
      title: 'Cross-Protocol Arbitrage Exploitation',
      category: 'Economic',
      subcategory: 'Arbitrage',
      severity: 'Medium',
      date: '2024-01-08',
      protocols: ['SushiSwap', 'PancakeSwap'],
      financialImpact: '$750K',
      description: 'Price discrepancies between DEXs exploited through automated arbitrage bot.',
      tags: ['arbitrage', 'dex', 'price-discrepancy']
    }
  ];

  const categories = ['all', 'Smart Contract', 'Economic', 'Infrastructure', 'Social Engineering'];

  const filteredExploits = exploits.filter(exploit => {
    const matchesSearch = exploit.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         exploit.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || exploit.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Exploit Database</h1>
        <p className="text-gray-600">Comprehensive analysis of DeFi vulnerabilities and attack patterns</p>
      </div>

      {/* Search and Filter */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search exploits..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Filter className="h-4 w-4 text-gray-400" />
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {categories.map(category => (
                <option key={category} value={category}>
                  {category === 'all' ? 'All Categories' : category}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Results */}
      <div className="space-y-4">
        {filteredExploits.map((exploit) => (
          <div key={exploit.id} className="bg-white rounded-lg shadow hover:shadow-md transition-shadow">
            <div className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">{exploit.title}</h3>
                  <p className="text-gray-600 mb-3">{exploit.description}</p>
                  <div className="flex flex-wrap gap-2 mb-3">
                    {exploit.tags.map(tag => (
                      <span key={tag} className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800">
                        <Tag className="h-3 w-3 mr-1" />
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
                <div className="text-right ml-4">
                  <span className={`inline-block px-2 py-1 text-xs font-semibold rounded-full mb-2 ${
                    exploit.severity === 'Critical' ? 'bg-red-100 text-red-800' :
                    exploit.severity === 'High' ? 'bg-orange-100 text-orange-800' :
                    exploit.severity === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {exploit.severity}
                  </span>
                  <p className="text-sm text-gray-600">{exploit.financialImpact}</p>
                </div>
              </div>

              <div className="flex items-center justify-between text-sm text-gray-600">
                <div className="flex items-center space-x-4">
                  <span>{exploit.category} â€¢ {exploit.subcategory}</span>
                  <span className="flex items-center">
                    <Calendar className="h-4 w-4 mr-1" />
                    {exploit.date}
                  </span>
                </div>
                <div className="flex space-x-2">
                  {exploit.protocols.map(protocol => (
                    <span key={protocol} className="bg-gray-100 px-2 py-1 rounded text-xs">
                      {protocol}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredExploits.length === 0 && (
        <div className="text-center py-12">
          <p className="text-gray-500">No exploits found matching your criteria.</p>
        </div>
      )}
    </div>
  );
};

export default Exploits;